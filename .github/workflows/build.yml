name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Remove containerd.io if present
        run: |
         sudo apt-get remove -y containerd.io
         sudo apt-get update

      - name: Install Docker
        run: sudo apt-get update && sudo apt-get install -y docker.io
        if: success()

      - name: Build Docker image
        run: docker build -t mywebsite .
        if: success()

      - name: Tag Docker image
        run: docker tag mywebsite madhumitha92/mywebsite:latest
        if: success()

      - name: Push Docker image to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin && docker push madhumitha92/mywebsite:latest
        if: success()
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
           aws-access-key-id: "${{ secrets.TF_USER_AWS_KEY }}"
           aws-secret-access-key: "${{ secrets.TF_USER_AWS_SECRET }}"
           aws-region: us-west-1
        if: success()

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        #with:
        #  terraform_version: 1.0.0
        if: success()

      - name: Terraform Init
        working-directory: terraform
        run: terraform init
        if: success()
      
      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan
      
      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve
        if: success()
       
      - name: Save EC2 public IP
        run: echo "EC2_PUBLIC_IP=$(terraform output public_ip | tr -d '"'')" >> $GITHUB_ENV 
        working-directory: terraform

      - name: Install Ansible
        run: sudo apt-get install ansible
        if: success()

      - name: Set up SSH key pair for Ansible
        run: |
          ssh-keygen -t rsa -b 4096 -C "ansible-key" -f ~/.ssh/ansible-key -N ""
          cp ~/.ssh/ansible-key $HOME/ansible-private-key.pem        
        if: success()

      - name: Run Ansible playbook
        working-directory: ansible  # Change the working directory to the Ansible directory
        run: ansible-playbook -i "${{ env.EC2_PUBLIC_IP }}", deploy.yml --private-key=$HOME/ansible-private-key.pem
        env:
          ANSIBLE_HOST_KEY_CHECKING: false
        # No need for explicit error handling; Ansible will exit with non-zero status on error

      # Documentation for each step
      - name: Document steps
        run: |
          echo "Step 1: Checkout code - Check out the code from the repository"
          echo "Step 2: Install Docker - Install Docker on the virtual machine"
          echo "Step 3: Build Docker image - Build Docker image from the Dockerfile"
          echo "Step 4: Tag Docker image - Tag the built Docker image"
          echo "Step 5: Push Docker image to Docker Hub - Push Docker image to Docker Hub"
          echo "Step 6: Install Terraform - Install Terraform on the virtual machine"
          echo "Step 7: Terraform Init - Initialize Terraform configuration"
          echo "Step 8: Terraform Apply - Apply Terraform configuration to provision resources"
          echo "Step 9: Install Ansible - Install Ansible on the virtual machine"
          echo "Step 10: Set up SSH key pair for Ansible - Generate SSH key pair for Ansible"
          echo "Step 11: Add SSH key to agent - Add SSH key to SSH agent for Ansible"
          echo "Step 12: Run Ansible playbook - Execute Ansible playbook to deploy Docker image"
        # Always successful; documentation step does not affect the workflow outcome
        if: always()
